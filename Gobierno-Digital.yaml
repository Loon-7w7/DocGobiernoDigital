openapi: 3.0.0
info:
  title: Gobierno Digital
  version: 1.0.0
  description: Gobierno digital es un servicio de ejemplo para los solicitantes del servicio Ventanilla Única
  license:
    url: 'https://egx-vu-gobiernodigital.azurewebsites.net'
  contact:
    email: app.dev@blueoceantech.com.mx
    name: BlueOcean
    url: 'https://egob.com/'
  termsOfService: 'https://egob.com/terminos-y-condiciones/'
servers:
  - url: 'https://egx-vu-gobiernodigital.azurewebsites.net'
    description: 'Live Server:'
tags:
  - name: Lista de predial
  - name: Notificaciones
  - name: Funciones de predial
  - name: Costos
  - name: Token
paths:
  /api/Catastral/GetConQuery/:
    get:
      tags:
        - Lista de predial
      summary: Lista de predial por queryparams
      description: |-
        Recibe los parámetros que usa para filtrar por medio de queryparams
        y retorna una lista de predial con sus cabeceras
      parameters:
        - name: Folio
          in: query
          schema:
            type: string
            example: '23665'
          example: '2'
          description: Opcional-Folio del predial
          allowReserved: true
        - schema:
            type: string
            example: 06-0098
          in: query
          name: Clave
          description: Opcional-Clave del predial
          allowEmptyValue: true
        - schema:
            type: string
            example: Hennrry Chan
          in: query
          name: Propietario
          description: Opcional-Propietario del predial
          allowEmptyValue: true
        - schema:
            type: string
            example: 'Calle 7 diag #90 entre 47 y 49, Colonia Santa María, Mérida'
          in: query
          name: Direccion
          description: Opcional-Direccion del predial
          allowEmptyValue: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/Lista-predial.yaml
            application/xml:
              schema:
                $ref: ./models/Lista-predial.yaml
              examples: {}
            multipart/form-data:
              schema:
                $ref: ./models/Lista-predial.yaml
            text/html:
              schema:
                $ref: ./models/Lista-predial.yaml
              examples: {}
            text/plain:
              schema:
                $ref: ./models/Lista-predial.yaml
      x-internal: false
  /api/Catastral/GetCatastral:
    post:
      tags:
        - Lista de predial
      summary: Lista de predial por Body
      description: Es un método post que recibe por el body los parámetros de filtrado
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/Filtros-predial.yaml
            examples:
              Example 1:
                value:
                  Folio: '2399'
                  Clave: ''
                  Propietario: ''
                  Direcion: ''
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              $ref: ./models/Filtros-predial.yaml
        description: ''
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/Lista-predial.yaml
            multipart/form-data:
              schema:
                $ref: ./models/Lista-predial.yaml
            application/xml:
              schema:
                $ref: ./models/Lista-predial.yaml
            text/html:
              schema:
                $ref: ./models/Lista-predial.yaml
  '/api/Catastral/GetConPath/{Folio}/{Clave?}/{Propietario?}/{Direcion?}/':
    get:
      tags:
        - Lista de predial
      summary: Lista predial por pathparams
      description: |-
        Recibe los parámetros de filtrado a partir de pathparams
        y retorna una lista de predial con su cabecera
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '':
          content:
            application/json:
              schema:
                $ref: ./models/Lista-predial.yaml
          description: ''
      parameters: []
    parameters:
      - schema:
          type: string
        name: Folio
        in: path
        required: true
      - schema:
          type: string
        name: Clave?
        in: path
        required: true
      - schema:
          type: string
        name: Propietario?
        in: path
        required: true
      - schema:
          type: string
        name: Direcion?
        in: path
        required: true
  /api/AuthCatsatral/GetAuntCatastral:
    post:
      tags:
        - Lista de predial
      summary: Lista predial con autentificación
      description: |-
        Listado de predial que válida que se envié un token válido por medio de los headers
        regresa lista de predial con sus cabeceras
      requestBody:
        content: {}
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYXNlV2ViQXBpU3ViamVjdCIsImp0aSI6ImQyZGM2MTdiLWY1ODEtNDI3YS05M2FiLTg4MmYxM2U1ODM3ZiIsImlhdCI6IjExLzIzLzIwMjIgNTozMDo0MyBQTSIsInVzdWFyaW8iOiJMdWlzIiwiQ29udHJhc2XDsWEiOiIxMjM0IiwiZXhwIjoxNzAwNzYwNjQzLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo3MjU5LyIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjcyNTkvIn0.nf3fXx62MmrnjnH3BhSSeAgWzlr1Fr9qsupo-Z8GVCU
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYXNlV2ViQXBpU3ViamVjdCIsImp0aSI6ImQ2NzAxNjBjLWY0NzgtNDk1Ny05ZTBmLTRkNTU4MTZjZTdmMiIsImlhdCI6IjExLzIzLzIwMjIgNDozMTowMSBQTSIsInVzdWFyaW8iOiJMdWlzIiwiQ29udHJhc2XDsWEiOiIxMjMiLCJleHAiOjE3MDA3NTcwNjEsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0OjcyNTkvIiwiYXVkIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NzI1OS8ifQ.cvD4VXi6WV2tNW5ZrnowpLIcTEO513aJhnPZ96nEaDY
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/Lista-predial.yaml
            application/xml:
              schema:
                $ref: ./models/Lista-predial.yaml
  /api/Notificaciones/EgxINotificacion:
    post:
      tags:
        - Notificaciones
      summary: Notificación de pago corto
      description: 'Recibe por el body el precio pagado, el folio y el correo del trámite y actualiza ha pagado el predial'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/egxShot.yaml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/notificaciones/Createnotificaion:
    post:
      summary: Notificación de pago largo
      operationId: post-api-notificaciones-Createnotificaion
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/Notificaion-de-pago.yaml
      description: |-
        Recibe varios datos de entrada en el body egxProcessInstance y selectedRecord
        que cada uno trae sus propios datos
      tags:
        - Notificaciones
  /api/Catastral/UpdateCatastral:
    put:
      tags:
        - Funciones de predial
      summary: Actualizar Predial
      description: |-
        Recibe por el body los datos que se van a actualizar todos opcionales
        y por queryparams revise el id del predial a actualizar
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                valorCatastral: 4
                folioCatastral: '2399'
                claveCatastral: 215-BFG
                Calle: '52'
                letra: B
                numero: '252'
                cruzamientouno: '12'
                cruzamientodos: '425'
                direcion: 'calle 34,H numero 45 x 34 y 56 colonia San Crestal, 94342'
                codigopostal: '9971235'
                adeudo: 4
                propietarioActual: Hennrry Chan
                pagado: true
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
          text/html:
            schema:
              $ref: ./models/Actualizar-predial.yaml
        description: ''
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - schema:
            type: string
            example: 95f532a5-cb66-bd1f-08d973a7334
          in: query
          name: id
          description: Id del predial
  /api/Catastral/CreateCatastral:
    post:
      tags:
        - Funciones de predial
      summary: Crea un predial nuevo
      description: |-
        Genera un predial nuevo 
        y recibe por el body los datos del predial
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                valorCatastral: 4
                folioCatastral: '2399'
                claveCatastral: 215-BFG
                Calle: '52'
                letra: B
                numero: '252'
                cruzamientouno: '12'
                cruzamientodos: '425'
                direcion: 'calle 34,H numero 45 x 34 y 56 colonia San Crestal, 94342'
                codigopostal: '9971235'
                adeudo: 4
                propietarioActual: Hennrry Chan
          application/xml:
            schema:
              $ref: ./models/Crear-predial.yaml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/Catastral/DeleteCatastral:
    delete:
      tags:
        - Funciones de predial
      summary: Elimina predial
      description: Recibe por queryparams el id del predial en formato guid
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      parameters:
        - schema:
            type: string
            example: 95f532a5-cb66-bd1f-08d973a7334
          in: query
          name: id
          description: id del predial
  /api/Catastral/GetCostos:
    get:
      tags:
        - Costos
      summary: Lista de todos los costos
      description: Regresa una lista de costos mediante el predial
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/lista-de-costos.yaml
            application/xml:
              schema:
                $ref: ./models/lista-de-costos.yaml
  /api/Catastral/Costo:
    post:
      tags:
        - Costos
      summary: Costo de un predial
      description: |-
        Recibe por el body el id en formato guid
        y en caso de no tener id correcto regresará datos nulos
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/lista-de-costos.yaml
          application/xml:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: id del predial
            examples:
              Example 1:
                value: |-
                  {
                    "id": "d9084ebe-ea30-45c8-bebe-d7e4402c64d0"
                          
                  }
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/Costo.yaml
      parameters: []
  /api/Auth/GetToken:
    post:
      tags:
        - Token
      summary: Token de autentificación
      description: |-
        Recibe de parámetros en el body UsuarioName y Contraseña
        y regresa un objeto con el token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                UsuarioName: Luis
                Contraseña: '1234'
              properties:
                UsuarioName:
                  type: string
                Contraseña:
                  type: string
            examples:
              Example 1:
                value:
                  UsuarioName: Luis
                  Contraseña: '1234'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    type: string
                x-examples:
                  Example 1:
                    success: true
                    message: Exito
                    result: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYXNlV2ViQXBpU3ViamVjdCIsImp0aSI6ImQyZGM2MTdiLWY1ODEtNDI3YS05M2FiLTg4MmYxM2U1ODM3ZiIsImlhdCI6IjExLzIzLzIwMjIgNTozMDo0MyBQTSIsInVzdWFyaW8iOiJMdWlzIiwiQ29udHJhc2XDsWEiOiIxMjM0IiwiZXhwIjoxNzAwNzYwNjQzLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo3MjU5LyIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjcyNTkvIn0.nf3fXx62MmrnjnH3BhSSeAgWzlr1Fr9qsupo-Z8GVCU
              examples:
                Example 1:
                  value:
                    success: true
                    message: string
                    result: string
                Example 2:
                  value:
                    success: true
                    message: Exito
                    result: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYXNlV2ViQXBpU3ViamVjdCIsImp0aSI6ImQyZGM2MTdiLWY1ODEtNDI3YS05M2FiLTg4MmYxM2U1ODM3ZiIsImlhdCI6IjExLzIzLzIwMjIgNTozMDo0MyBQTSIsInVzdWFyaW8iOiJMdWlzIiwiQ29udHJhc2XDsWEiOiIxMjM0IiwiZXhwIjoxNzAwNzYwNjQzLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo3MjU5LyIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjcyNTkvIn0.nf3fXx62MmrnjnH3BhSSeAgWzlr1Fr9qsupo-Z8GVCU
components:
  securitySchemes:
    API Key - 1:
      type: http
      scheme: bearer
x-internal: false
