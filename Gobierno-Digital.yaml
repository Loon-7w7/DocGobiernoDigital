openapi: 3.0.0
info:
  title: Gobierno Digital
  version: 1.1.1
  description: "![gobiernod.png](https://egob.com/wp-content/themes/generatepress/templates/home/img/logo.svg)\n\n## **Vista general** ##\nGobierno digital busca dar a comprender la arquitectura de servicios externos compatibles con la plataforma SIVU, detallando las directivas que se deben seguir para tener una conectividad buena con la plataforma.\nEsta API te dará las estructuras, respuestas, modelos y peticiones necesarias que cada servicio debe de tener por sí mismo, tener estas especificaciones ayudará a tener una buena comunicación con la plataforma de manera correcta y rápida.\nLa plataforma de ejemplo se encuentra disponible en [Gobierno Digital.](https://egx-vu-gobiernodigital.azurewebsites.net)\n\n## **Modelos** ##\nLos modelos aquí mostrados se dividen en 2 categorías, peticiones(Request) y response(Respuesta).\n####  Response(Respuesta) ####\n- *La respuesta son los datos que su servicio regresa a la plataforma y estos pueden variar dependiendo de lo que quiera mostrar. Esto que da a consideracion del servicio.*\n#### Request(Petición) ####\n- *Las peticiones con datos que la plataforma envía a su servicio para realizar algún filtrado o buscar algo en específico.*\n- *Las peticiones pueden ser enviadas por diferentes secciones.*\n| Request | Método  | Ejemplo |\n|--|--|--|\n| QueryParams | Get | https://sudominio.com/?id=suid |\n| PathParams  | Get |https://SuDominio.com/id/|\n| Body\t\t  |\tPost| Json { id = \"suid\"}|\n"
  license:
    url: 'https://egx-vu-gobiernodigital.azurewebsites.net'
    name: Egob
  contact:
    email: app.dev@blueoceantech.com.mx
    name: BlueOcean
    url: 'https://egob.com/'
  termsOfService: 'https://egob.com/terminos-y-condiciones/'
servers:
  - url: 'https://egx-vu-gobiernodigital.azurewebsites.net'
    description: Live Server
tags:
  - name: Lista de predial
    description: endpoint para lista de predial
  - name: Notificaciones
    description: endpoint de notificaion de pagos
  - name: Funciones de predial
    description: endpoint funciones de pago
  - name: Costos
    description: endpoint relacionado con costos
  - name: Token
    description: endpoint relacionados con tokens
paths:
  /api/Catastral/GetConQuery:
    get:
      tags:
        - Lista de predial
      summary: Lista de predial por queryparams
      description: |-
        Recibe los parámetros que usa para filtrar por medio de queryparams
        y retorna una lista de predial con sus cabeceras
      parameters:
        - schema:
            type: string
            example: 06-0098
          in: query
          name: Clave
          description: Opcional-Clave del predial
          allowEmptyValue: true
        - schema:
            type: string
            example: Hennrry Chan
          in: query
          name: Propietario
          description: Opcional-Propietario del predial
          allowEmptyValue: true
        - schema:
            type: string
            example: 'Calle 7 diag #90 entre 47 y 49, Colonia Santa María, Mérida'
          in: query
          name: Direccion
          description: Opcional-Dirección del predial
          allowEmptyValue: true
        - schema:
            type: string
            example: FHJ-215
          in: query
          name: Folio
          description: Opcional-Folio del predial
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/Lista-predial.yaml
      x-internal: false
      operationId: 54EE0CF7-E367-408E-AE68-402173547A6F
  /api/Catastral/GetCatastral:
    post:
      tags:
        - Lista de predial
      summary: Lista de predial por Body
      description: Es un método post que recibe por el body los parámetros de filtrado
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/Filtros-predial.yaml
        description: Filtros de la busqueda
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/Lista-predial.yaml
      operationId: 6390D872-F6B4-4CFA-A582-324146CEEC68
  '/api/Catastral/GetConPath/{Folio}/{Clave}/{Propietario}/{Direccion}':
    get:
      tags:
        - Lista de predial
      summary: Lista predial por pathparams
      description: |-
        Recibe los parámetros de filtrado a partir de pathparams
        y retorna una lista de predial con su cabecera
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/Lista-predial.yaml
              examples: {}
      parameters: []
      operationId: C76B5DDD-9173-40A4-B6A3-232ECF3F6417
    parameters:
      - schema:
          type: string
        name: Folio
        in: path
        description: Folio del predial
        required: true
      - schema:
          type: string
        name: Clave
        in: path
        description: Clave del predial
      - schema:
          type: string
        name: Propietario
        in: path
        description: Propietario del predial
      - schema:
          type: string
        name: Direccion
        in: path
        description: Dirección del propietario
  /api/AuthCatsatral/GetAuntCatastral:
    post:
      tags:
        - Lista de predial
      summary: Lista predial con autentificación
      description: |-
        Listado de predial que válida que se envié un token válido por medio de los headers
        regresa lista de predial con sus cabeceras
      requestBody:
        content: {}
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYXNlV2ViQXBpU3ViamVjdCIsImp0aSI6ImQyZGM2MTdiLWY1ODEtNDI3YS05M2FiLTg4MmYxM2U1ODM3ZiIsImlhdCI6IjExLzIzLzIwMjIgNTozMDo0MyBQTSIsInVzdWFyaW8iOiJMdWlzIiwiQ29udHJhc2XDsWEiOiIxMjM0IiwiZXhwIjoxNzAwNzYwNjQzLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo3MjU5LyIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjcyNTkvIn0.nf3fXx62MmrnjnH3BhSSeAgWzlr1Fr9qsupo-Z8GVCU
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYXNlV2ViQXBpU3ViamVjdCIsImp0aSI6ImQ2NzAxNjBjLWY0NzgtNDk1Ny05ZTBmLTRkNTU4MTZjZTdmMiIsImlhdCI6IjExLzIzLzIwMjIgNDozMTowMSBQTSIsInVzdWFyaW8iOiJMdWlzIiwiQ29udHJhc2XDsWEiOiIxMjMiLCJleHAiOjE3MDA3NTcwNjEsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0OjcyNTkvIiwiYXVkIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NzI1OS8ifQ.cvD4VXi6WV2tNW5ZrnowpLIcTEO513aJhnPZ96nEaDY
          description: Token de autentificacion
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/Lista-predial.yaml
      operationId: 8C7765AC-0726-4281-9AD9-CFBDEE9F91FD
  /api/Notificaciones/EgxINotificacion:
    post:
      tags:
        - Notificaciones
      summary: Notificación de pago corto
      description: 'Recibe por el body el precio pagado, el folio y el correo del trámite y actualiza ha pagado el predial'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/egxShot.yaml
      responses:
        '200':
          description: OK
      operationId: B4C8B9B4-64DD-40FC-9E0E-79321DF1B982
  /api/notificaciones/Createnotificaion:
    post:
      summary: Notificación de pago largo
      operationId: 325E80B2-FB1A-4824-968B-1A8909309402
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/Notificaion-de-pago.yaml
            examples:
              Example 1:
                value:
                  selectedRecord:
                    id: 95f532a5-cb66-bd1f-08d973a7334
                    folio: jugo11
                    nombre: jugo
                    Precio: 19
                  egxProcessInstance:
                    amount: 22
                    authorizationNumber: '801586'
                    createdDate: '2021-06-09T15:33:40.8160973'
                    expirationDate: '2022-06-09T15:33:40.8160973'
                    folio: 4UEQFNUOFRQN
                    Id: 95f532a5-cb66-bd1f-08d973a7342
                    oderId: 95f532a5-cb66-bd1f-08d955a7334
                    paymentDate: '2021-06-09T15:33:40.8160973'
                    PaymentMethod: Card
                    ProcessInstanceId: 95f512a5-cb66-bd1f-08d973a7334
                    ProcessInstanceName: Trámite con costo si resolucion
                    referenceFolio: NFGAKFAUFNAL
                    transeactionId: trzpuinzdzx47rmueeeg
        description: datos de la petición
      description: |-
        Recibe varios datos de entrada en el body egxProcessInstance y selectedRecord
        que cada uno trae sus propios datos
      tags:
        - Notificaciones
  /api/Catastral/UpdateCatastral:
    put:
      tags:
        - Funciones de predial
      summary: Actualizar Predial
      description: |-
        Recibe por el body los datos que se van a actualizar todos opcionales
        y por queryparams revise el id del predial a actualizar
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
            example: 95f532a5-cb66-bd1f-08d973a7334
          in: query
          name: id
          description: Id del predial
      operationId: 173A5D41-E393-402A-9AE4-E1858F468D22
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/Actualizar-predial.yaml
        description: ''
  /api/Catastral/CreateCatastral:
    post:
      tags:
        - Funciones de predial
      summary: Crea un predial nuevo
      description: |-
        Genera un predial nuevo 
        y recibe por el body los datos del predial
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/Crear-predial.yaml
          application/xml:
            schema:
              $ref: ./models/Crear-predial.yaml
      responses:
        '200':
          description: OK
      operationId: 08D9871F-2C92-43C9-A7AB-8AB69E498AA1
  /api/Catastral/DeleteCatastral:
    delete:
      tags:
        - Funciones de predial
      summary: Elimina predial
      description: Recibe por queryparams el id del predial en formato guid
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
            example: 95f532a5-cb66-bd1f-08d973a7334
          in: query
          name: id
          description: id del predial
      operationId: 9330C8DF-A595-4E20-AB90-AEDE59F9D467
  /api/Catastral/GetCostos:
    get:
      tags:
        - Costos
      summary: Lista de todos los costos
      description: Regresa una lista de costos mediante el predial
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/lista-de-costos.yaml
      operationId: CD32D642-F9DE-4531-A108-445A5081B76B
  /api/Catastral/Costo:
    post:
      tags:
        - Costos
      summary: Costo de un predial
      description: |-
        Recibe por el body el id en formato guid
        y en caso de no tener id correcto regresará datos nulos
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  id: 54EE0CF7-E367-408E-AE68-402173547A6F
              properties:
                id:
                  type: string
                  description: id en formato guid del predial
            examples:
              Example 1:
                value:
                  id: string
              Example 2:
                value:
                  id: 54EE0CF7-E367-408E-AE68-402173547A6F
        description: id en formato guid del predial
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: ./models/Costo.yaml
      parameters: []
      operationId: C375F83E-F23C-45B1-AAF2-2BD658DB251A
    parameters: []
  /api/Auth/GetToken:
    post:
      tags:
        - Token
      summary: Token de autentificación
      description: |-
        Recibe de parámetros en el body UsuarioName y Contraseña
        y regresa un objeto con el token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                UsuarioName: Luis
                Contraseña: '1234'
              properties:
                UsuarioName:
                  type: string
                  description: Nombre de usuario
                Contraseña:
                  type: string
                  description: Conntraseña
            examples:
              Example 1:
                value:
                  UsuarioName: Luis
                  Contraseña: '1234'
        description: Datos para crear el token
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    type: string
                x-examples:
                  Example 1:
                    success: true
                    message: Exito
                    result: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYXNlV2ViQXBpU3ViamVjdCIsImp0aSI6ImQyZGM2MTdiLWY1ODEtNDI3YS05M2FiLTg4MmYxM2U1ODM3ZiIsImlhdCI6IjExLzIzLzIwMjIgNTozMDo0MyBQTSIsInVzdWFyaW8iOiJMdWlzIiwiQ29udHJhc2XDsWEiOiIxMjM0IiwiZXhwIjoxNzAwNzYwNjQzLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo3MjU5LyIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjcyNTkvIn0.nf3fXx62MmrnjnH3BhSSeAgWzlr1Fr9qsupo-Z8GVCU
              examples:
                Example 1:
                  value:
                    success: true
                    message: string
                    result: string
                Example 2:
                  value:
                    success: true
                    message: Exito
                    result: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYXNlV2ViQXBpU3ViamVjdCIsImp0aSI6ImQyZGM2MTdiLWY1ODEtNDI3YS05M2FiLTg4MmYxM2U1ODM3ZiIsImlhdCI6IjExLzIzLzIwMjIgNTozMDo0MyBQTSIsInVzdWFyaW8iOiJMdWlzIiwiQ29udHJhc2XDsWEiOiIxMjM0IiwiZXhwIjoxNzAwNzYwNjQzLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo3MjU5LyIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjcyNTkvIn0.nf3fXx62MmrnjnH3BhSSeAgWzlr1Fr9qsupo-Z8GVCU
      operationId: 50F55859-0555-4E16-9B53-87CF1ECBFDCC
      x-internal: false
components:
  securitySchemes:
    API Key - 1:
      type: http
      scheme: bearer
      description: ''
  requestBodies: {}
x-internal: false
